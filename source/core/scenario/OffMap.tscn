[gd_scene load_steps=9 format=2]

[sub_resource type="VisualShaderNodeTexture" id=1]
source = 2

[sub_resource type="VisualShaderNodeInput" id=2]
input_name = "uv"

[sub_resource type="VisualShaderNodeColorConstant" id=3]
constant = Color( 0.117647, 0.109804, 0.105882, 1 )

[sub_resource type="VisualShaderNodeColorOp" id=4]
operator = 4

[sub_resource type="VisualShader" id=5]
code = "shader_type canvas_item;



void vertex() {
// Output:0

}

void fragment() {
// Color:6
	vec3 n_out6p0;
	float n_out6p1;
	n_out6p0 = vec3(0.117647,0.109804,0.105882);
	n_out6p1 = 1.000000;

// Input:5
	vec3 n_out5p0;
	n_out5p0 = vec3(UV,0.0);

// Texture:4
	vec3 n_out4p0;
	float n_out4p1;
	{
		vec4 _tex_read = texture( TEXTURE , n_out5p0.xy );
		n_out4p0 = _tex_read.rgb;
		n_out4p1 = _tex_read.a;
	}

// ColorOp:7
	vec3 n_out7p0;
	{
		float base=n_out6p0.x;
		float blend=n_out4p0.x;
		if (base < 0.5) {
			n_out7p0.x = 2.0 * base * blend;
		} else {
			n_out7p0.x = 1.0 - 2.0 * (1.0 - blend) * (1.0 - base);
		}
	}
	{
		float base=n_out6p0.y;
		float blend=n_out4p0.y;
		if (base < 0.5) {
			n_out7p0.y = 2.0 * base * blend;
		} else {
			n_out7p0.y = 1.0 - 2.0 * (1.0 - blend) * (1.0 - base);
		}
	}
	{
		float base=n_out6p0.z;
		float blend=n_out4p0.z;
		if (base < 0.5) {
			n_out7p0.z = 2.0 * base * blend;
		} else {
			n_out7p0.z = 1.0 - 2.0 * (1.0 - blend) * (1.0 - base);
		}
	}

// Output:0
	COLOR.rgb = n_out7p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -1.33333, -118.333 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 1520, 0 )
nodes/fragment/4/node = SubResource( 1 )
nodes/fragment/4/position = Vector2( 780, 100 )
nodes/fragment/5/node = SubResource( 2 )
nodes/fragment/5/position = Vector2( 460, 100 )
nodes/fragment/6/node = SubResource( 3 )
nodes/fragment/6/position = Vector2( 800, -120 )
nodes/fragment/7/node = SubResource( 4 )
nodes/fragment/7/position = Vector2( 1140, -40 )
nodes/fragment/connections = PoolIntArray( 5, 0, 4, 0, 7, 0, 0, 0, 6, 0, 7, 0, 4, 0, 7, 1 )

[sub_resource type="ShaderMaterial" id=6]
shader = SubResource( 5 )

[sub_resource type="OpenSimplexNoise" id=7]
octaves = 6
period = 0.1
persistence = 0.1

[sub_resource type="NoiseTexture" id=8]
flags = 3
width = 256
height = 256
seamless = true
noise = SubResource( 7 )

[node name="OffMap" type="CanvasLayer"]
layer = -1

[node name="TextureRect" type="TextureRect" parent="."]
material = SubResource( 6 )
anchor_right = 1.0
anchor_bottom = 1.0
mouse_filter = 2
texture = SubResource( 8 )
stretch_mode = 2

